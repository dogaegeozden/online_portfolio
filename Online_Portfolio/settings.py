"""
Django settings for Online_Portfolio project.

Generated by 'django-admin startproject' using Django 3.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

# LIBRARIES
from pathlib import Path
from json import load as load_json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Reading the json file which contains the application's secret key.
with open(Path(BASE_DIR, 'secret_key.json'), "r") as secret_key_file:
    secret_key = load_json(secret_key_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = secret_key['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# A list for the allowed hosts. Hint: Do not include http/https in their domains
ALLOWED_HOSTS = ["127.0.0.1", "dogaegeozden.com", "www.dogaegeozden.com", "155.45.3.34"]

# A list of trusted hosts. 
CSRF_TRUSTED_ORIGINS = ["http://127.0.0.1", "http://155.45.3.34", "https://155.45.3.34", "http://localhost", "http://www.dogaegeozden.com", "https://www.dogaegeozden.com", "http://dogaegeozden.com", "https://dogaegeozden.com"]

# A list for installed applications
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'myprofile.apps.MyprofileConfig',
    'works.apps.WorksConfig',
    'resumes.apps.ResumesConfig',
    'certifications.apps.CertificationsConfig', # You can find this class in apps.py file in certifications app
    'blog.apps.BlogConfig', # You can find this class in apps.py file in blog app
    'contact.apps.ContactConfig', # You can find this class in apps.py file in contact app
    'privacy_policy.apps.PrivacyPolicyConfig',
    'terms_and_conditions.apps.TermsAndConditionsConfig',
    'debug_toolbar',
    'embed_video',
]

# A list for middlewares. "Middleware is a framework of hooks into Django’s request/response processing. It’s a light, low-level “plugin” system for globally altering Django’s input or output. Each middleware component is responsible for doing some specific function. For example, Django includes a middleware component, AuthenticationMiddleware, that associates users with requests using sessions."
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'debug_toolbar.middleware.DebugToolbarMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

# Project's root's url configuration. Hint: The urls.py file in the root folder is containing url patters and configurations for STATIC_URL, STATIC_ROOT, MEDIA_URL, MEDIA_ROOT and debug tool bar
ROOT_URLCONF = 'Online_Portfolio.urls'

# Templates settings to configure how django will look for templates, context processors and etc.
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [Path(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'myprofile.context_processors.social_media_link_processor',
                'myprofile.context_processors.cookie_notice_processor',
                'myprofile.context_processors.social_media_click_processor',
            ],
        },
    },
]

# WSGI: Web Server Gateaway Interface -> WSGI is a specification that describes the communication between web servers and Python web applications or frameworks. It explains how a web server communicates with python web applications/frameworks and how web applications/frameworks can be chained for processing a request.
WSGI_APPLICATION = 'Online_Portfolio.wsgi.application'

# MySQL Database
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'read_default_file': str(Path(BASE_DIR, 'mysqllogin.cnf')),
        }
    }
}

# Password validators -> Password management is something that should generally not be reinvented unnecessarily, and Django endeavors to provide a secure and flexible set of tools for managing user passwords.
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

# Language setting
LANGUAGE_CODE = 'en-us'

# Time zone setting for the web application
TIME_ZONE = 'Canada/Eastern'

# The goal of internationalization and localization is to allow a single Web application to offer its content in languages and formats tailored to the audience.
USE_I18N = True
USE_L10N = True

# Setting this to true allowing the developer to use django.utils.timezone in models.
USE_TZ = True

# # CSRF SECURITY
# CSRF_COOKIE_SECURE = True
#
# # SESSION SECURITY
# SESSION_COOKIE_SECURE = True
#
# # SECURE SSL REDIRECT
# # It should be True after you buy ssl certification
# SECURE_SSL_REDIRECT = True
#
# # SECURE HSTS
# SECURE_HSTS_SECONDS = 318400
#
# # It should be True after you buy ssl certification
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
#
# SECURE_HSTS_PRELOAD = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

# The URL to use when referring to static files (where they will be served from)
STATIC_URL = '/static/'

# The absolute path to the directory where collectstatic will collect static files for deployment.
STATIC_ROOT = Path(BASE_DIR, 'staticfiles')

# Websites generally need to serve additional files such as images, JavaScript, or CSS. In Django, we refer to these files as “static files”.
STATICFILES_DIRS = [
    Path(BASE_DIR, 'static')
]

# A path setting to specify where the user uploaded files will be stored
MEDIA_URL = '/media/'

# A setting to serve user-uploaded media files
MEDIA_ROOT = Path(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/4.0/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# DJANGO DEBUG TOOL INTERNAL_IPS
INTERNAL_IPS = [
    '127.0.0.1',
]
